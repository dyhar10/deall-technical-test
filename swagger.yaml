openapi: 3.0.0
info:
    title: User Management API
    version: 1.0.0
    description: API documentation for User Management CRUD.
servers:
    - url: http://localhost:3000
paths:
    /register:
        post:
            tags:
                - users
            summary: Register a new user
            security:
                - bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                password:
                                    type: string
                                role:
                                    type: string
                            required:
                                - username
                                - password
                                - role
            responses:
                '201':
                    description: User registered successfully
                '400':
                    description: Bad request
                '500':
                    description: Internal server error
    /login:
        post:
            summary: Login with username and password
            tags:
                - users
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                password:
                                    type: string
                            required:
                                - username
                                - password
            responses:
                '200':
                    description: Login successful
                '401':
                    description: Unauthorized
                '500':
                    description: Internal server error
    /users:
        get:
            summary: Get all users
            tags:
                - users
            responses:
                '200':
                    description: Users fetched successfully
                '401':
                    description: Unauthorized
                '403':
                    description: Access denied
                '500':
                    description: Internal server error
    /users/{username}:
        get:
            summary: Get user by ID
            tags:
                - users
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
            responses:
                '200':
                    description: User fetched successfully
                '401':
                    description: Unauthorized
                '403':
                    description: Access denied
                '404':
                    description: User not found
                '500':
                    description: Internal server error
    /users/update/{username}:
        put:
            summary: Delete user by ID
            tags:
                - users
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
            responses:
                '200':
                    description: User deleted successfully
                '401':
                    description: Unauthorized
                '403':
                    description: Access denied
                '404':
                    description: User not found
                '500':
                    description: Internal server error
    /users/delete/{username}:
        delete:
            summary: Delete user by ID
            tags:
                - users
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
            responses:
                '200':
                    description: User deleted successfully
                '401':
                    description: Unauthorized
                '403':
                    description: Access denied
                '404':
                    description: User not found
                '500':
                    description: Internal server error
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
